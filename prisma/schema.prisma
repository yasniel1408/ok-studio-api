// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

//sqlite
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}


model Type {
  id           String @id @default(cuid())
  name        String @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  objects     Object[]
  contracts   Contract[]
  sample_images   SampleImage[]
}


model User {
  id           String @id @default(cuid())
  name        String @unique
  email       String @unique
  password    String
  role        String @default("USER")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  objects     FavoriteObjectsUser[]
}

model FavoriteObjectsUser {
  id           String @id @default(cuid())
  user        User @relation(fields: [userId], references: [id])
  userId      String
  object      Object @relation(fields: [objectId], references: [id])
  objectId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Object {
  id           String @id @default(cuid())
  name        String @unique
  price       Float
  description String
  type        Type @relation(fields: [typeId], references: [id])
  typeId      String
  category    String
  subcategory String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  images      ObjectImage[]
  users       FavoriteObjectsUser[]
}

model ObjectImage {
  id           String @id @default(cuid())
  object      Object @relation(fields: [objectId], references: [id])
  objectId    String
  url         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Client {
  id           String @id @default(cuid())
  name        String @unique
  age         Int
  mobile      String
  homePhone   String
  notes       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  appointments  Appointment[]
}

model Contract {
  id           String @id @default(cuid())
  name        String @unique
  type        Type @relation(fields: [typeId], references: [id])
  typeId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  appointment Appointment?
}

model SampleImage {
  id           String @id @default(cuid())
  type        Type @relation(fields: [typeId], references: [id])
  typeId      String
  url         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Appointment {
  id           String @id @default(cuid())
  clientId    String
  client      Client @relation(fields: [clientId], references: [id])
  contractId  String?
  contract    Contract? @relation(fields: [contractId], references: [id])
  accepted    String
  notes       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


